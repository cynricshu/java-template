apply plugin: 'application'
apply plugin: 'org.springframework.boot'

mainClassName = 'com.cynricshu.Application'
version = "1.0.0"

task copyStartScript(type: Copy, dependsOn: [bootStartScripts]) {
    from project.file("build/bootScripts")
    into project.file("output/$project.name/bin")
}

task copyLib(type: Copy, dependsOn: [bootJar]) {
    from project.file("build/libs")
    into project.file("output/${project.name}/")
}

task copyConf(type: Copy) {
    from project.file("deploy")
    into project.file("output/${project.name}/")
}

task release(type: Tar, dependsOn: [copyConf, copyLib]) {
    delete project.file("output/${project.name}/")
    delete project.file("output/${project.name}.tar.gz")

    project.file("output/${project.name}/log").mkdirs()

    project.file("output/${project.name}/revision").withOutputStream {
        outputStream -> outputStream << getGitRevision()
    }

    archiveName = "${project.name}.tar.gz"
    destinationDir = project.file("output")
    compression = Compression.GZIP
    from(project.file("output/${project.name}/"))
    into("${project.name}")
}

static def getGitRevision() {
    def cmd = "git rev-parse HEAD"
    def revision = "git revision: " + cmd.execute().text.trim()
    revision
}

dependencies {
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    implementation(project(":common-web"))
    implementation("org.apache.commons:commons-collections4")

    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation("mysql:mysql-connector-java")
    implementation("org.mybatis.spring.boot:mybatis-spring-boot-starter")

    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

